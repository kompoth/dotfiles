#!/usr/bin/perl
# Script warns user about low battery charge.
# It uses umess X pop-up program to create warning and retrieves battery
# status via acpi utility.
# Edit following capitalized variables to suit your preferences.
# Author: Vasily Negrebetskiy


use strict;
use warnings;

my $BATNUM = 0;
my $INTERVAL = 1;  # min, interval between checks
my $CRITLVL = 30;  # %, alarming battery charge
my $FONT = "Iosevka:size=24";  # xft notation
my $FGCOL = "white";
my $BGCOL = "red";

my $acpi;
my $charge;
my $status;
my $messaged = 0;
my $acpicmd = "acpi -b | grep 'Battery $BATNUM' |";
my $warnloop = "while (true); do " . 
               "printf \"Critical battery level: %d%%%%\"; " . 
               "sleep 1; done";
my $umesscmd = "umess -f \"$FONT\" -B \"$BGCOL\" -F \"$FGCOL\" -d |";
my $discharging = 0;
my $exitcode;

while (1) {
  # read the first line of the "acpi" command output
  open(ACPI, $acpicmd) or die("Failed to get battery info: $!");
  $acpi = <ACPI>;
  close(ACPI);
  
  # die on unexpected battery info
  die "Unexpected battery info: $acpi" unless ($acpi =~ /\w+: ([A-Za-z\s]+), (\d+)%/);
  $status = $1;
  $charge = $2;
  $discharging = ($status eq "Not charging" or $status eq "Discharging");
  
  if ($discharging and $charge < $CRITLVL) {
    my $cmd = sprintf $warnloop . " | " . $umesscmd , $charge;
    open(WARNLOOP, $cmd) or die("Warnloop error: $!");
    $exitcode = <WARNLOOP>;
    close(WARNLOOP);
  }
  
  sleep($INTERVAL * 60);
}
